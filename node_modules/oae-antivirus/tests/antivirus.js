/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var os = require('os');
var util = require('util');

var ContentDAO = require('oae-content/lib/internal/dao');
var RestAPI = require('oae-rest');
var TempFile = require('oae-util/lib/tempfile');
var TestsUtil = require('oae-tests');

var AntiVirusAPI = require('../lib/api');
var AntiVirusConstants = require('../lib/constants').AntiVirusConstants;

describe('Anti-Virus', function() {

    // Rest context that can be used every time we need to make a request as a cam tenant admin
    var camAdminRestContext = null;

    // Callback functions that are executed during the tests
    var onError = null;
    var onFileCreate = null;
    var onStartMonitoring = null;
    var onStopMonitoring = null;

    // Construct the url of the log file
    var logFile = null;
    var logDirectory = null;

    /*!
     * Create an enabled clamav configuration from the given configuration
     *
     * @param  {String}     logDirectory    The full path of the ClamAV log file (e.g. /var/log/clamav/log)
     * @return {Object}                     The created global configuration
     */
    var _createConfig = function( logDirectory) {
        return {
            'logDirectory': logDirectory
        };
    };

    /**
     * Utility method that returns a stream that points to a corrupt file
     *
     * @return {Stream}     A stream that points to a corrupt file that can be uploaded
     */
    var _getFileStream = function() {
        var file = __dirname + '/data/file.txt';
        return fs.createReadStream(file);
    };

    /**
     * Initializes the admin REST contexts
     */
    before(function() {

        // Execute `onError` when an error occurred
        AntiVirusAPI.on(AntiVirusConstants.events.ERROR, function(err) {
            onError(err);
        });

        // Execute `onFileCreate` when a log file was created
        AntiVirusAPI.on(AntiVirusConstants.events.CREATE, function() {
            onFileCreate();
        });

        // Execute `onStartMonitoring` when a directory is being monotored successfully
        AntiVirusAPI.on(AntiVirusConstants.events.START, function() {
            onStartMonitoring();
        });

        // Execute `onStopMonitoring` when a directory is not being monitory any longer
        AntiVirusAPI.on(AntiVirusConstants.events.STOP, function() {
            onStopMonitoring();
        });

        // Fill up the cam admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    });

    /**
     * Make sure we have a new log file before each test
     */
    beforeEach(function() {
        logFile = TempFile.createTempFile({'suffix': '-clamav.log'}).path;
        logDirectory = logFile.split('/');
        logDirectory.pop();
        logDirectory = logDirectory.join('/');
    });

    /**
     * Remove the log file after each test
     */
    afterEach(function(callback) {

        // When an error occurred during runtime
        onError = function(err) {
            assert.fail(err.msg);
            return callback();
        };

        // When the monitoring has successfully stopped
        onStopMonitoring = function() {

            // Delete the log file
            fs.unlink(logFile, function(err) {
                assert.ok(!err);
                return callback();
            });
        };

        // Stop monitoring for file changes
        AntiVirusAPI.stopMonitoring();
    });

    describe('Scan files', function() {

        /**
         * Test that verifies that multiple listed files are marked as corrupt
         */
        it('verify that multiple listed corrupt files\' displayNames are updated', function(callback) {

            // Cache the created content items
            var createdContentItems = {};

            // When an error occurred during runtime
            onError = function(err) {
                assert.fail(err.msg);
                return callback();
            };

            // When a file has been created successfully
            onFileCreate = function() {

                // Fetch the content items
                ContentDAO.Content.getMultipleContentItems(_.keys(createdContentItems), null, function(err, contentItems) {
                    assert.ok(!err);
                    assert.strictEqual(contentItems.length, _.keys(createdContentItems).length);

                    // Check if the content item's displayName was updated
                    _.each(contentItems, function(contentItem) {
                        assert.strictEqual(contentItem.displayName, util.format('[CORRUPT] %s', createdContentItems[contentItem.id].displayName));
                    });

                    return callback();
                });
            };

            // When the directory is beign monitored successfully
            onStartMonitoring = function() {

                // Create a first content item
                RestAPI.Content.createFile(camAdminRestContext, 'The first file', 'A first corrupt file', 'public', _getFileStream, null, null, function(err, contentItem) {
                    assert.ok(!err);
                    createdContentItems[contentItem.id] = contentItem;

                    // Create a second content item
                    RestAPI.Content.createFile(camAdminRestContext, 'The second file', 'A second corrupt file', 'private', _getFileStream, null, null, function(err, contentItem) {
                        assert.ok(!err);
                        createdContentItems[contentItem.id] = contentItem;

                        // Create a third content item
                        RestAPI.Content.createFile(camAdminRestContext, 'The third file', 'A third corrupt file', 'private', _getFileStream, null, null, function(err, contentItem) {
                            assert.ok(!err);
                            createdContentItems[contentItem.id] = contentItem;

                            // Create a fourth content item
                            RestAPI.Content.createFile(camAdminRestContext, 'The fourth file', 'A fourth corrupt file', 'public', _getFileStream, null, null, function(err, contentItem) {
                                assert.ok(!err);
                                createdContentItems[contentItem.id] = contentItem;

                                // Create a fifth content item
                                RestAPI.Content.createFile(camAdminRestContext, 'The fifth file', 'A fifth corrupt file', 'public', _getFileStream, null, null, function(err, contentItem) {
                                    assert.ok(!err);
                                    createdContentItems[contentItem.id] = contentItem;

                                    // First fetch the revisions of the items, since we need the full, physical path, which is not available throught the public API
                                    var revisionIds = _.map(createdContentItems, function(contentItem) { return contentItem.latestRevisionId; });
                                    ContentDAO.Revisions.getMultipleRevisions(revisionIds, null, function(err, revisions) {
                                        assert.ok(!err);
                                        assert.strictEqual(revisions.length, _.keys(createdContentItems).length);

                                        // Mock the logging by ClamAV
                                        var lines = [];
                                        _.each(revisions, function(revision) {
                                            lines.push(util.format('%s %s FOUND\r\n', revision.uri, createdContentItems[revision.contentId].filename));
                                        });
                                        var data = lines.join('\r');
                                        fs.writeFile(logFile, data, 'utf8', function(err) {
                                            assert.ok(!err);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            };

            // Start monitoring with a misconfigured path to the log file
            AntiVirusAPI.startMonitoring(_createConfig(logDirectory), function(err) {
                assert.ok(!err);
            });
        });
    });
});
