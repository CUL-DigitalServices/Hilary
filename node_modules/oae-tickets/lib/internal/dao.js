/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');
var TicketsModels = require('../model');

/**
 * Creates a new ticket
 *
 * @param  {String}     ticketId            The ticket id
 * @param  {Object}     parameters          Object containing ticket fields
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        The thrown error, if any
 * @param  {Ticket}     callback.ticket     The created ticket
 */
var createTicket = module.exports.createTicket = function(ticketId, parameters, callback) {
    parameters = _.extend(parameters, {'created': Date.now(), 'lastModified': Date.now()});
    var query = Cassandra.constructUpsertCQL('ArticleTickets', 'ticketId', ticketId, parameters, 'QUORUM');
    Cassandra.runQuery(query.query, query.parameters, function(err) {
        if (err) {
            return callback(err);
        }

        // Return the created ticket
        getTicket(ticketId, function(err, ticket) {
            if (err) {
                return callback(err);
            }

            return callback(null, ticket);
        });
    });
};

/**
 * Delete a set of tickets
 *
 * @param  {String}     ticketId            The id of the ticket that needs to be deleted
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        Error object containing error code and error message
 */
var deleteTickets = module.exports.deleteTicket = function(ticketId, callback) {
    Cassandra.runQuery('DELETE FROM ArticleTickets WHERE ticketId = ?', [ticketId], function(err) {
        if (err) {
            log().error({'code': err.code, 'ticketId': ticketId, 'msg': err.msg}, 'Error while deleting ticket');
            return callback(err);
        }

        return callback();
    });
};

/**
 * Returns a ticket
 *
 * @param  {String}     ticketId            The id of the ticket that needs to be returned
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        Error object containing error code and error message
 * @param  {Ticket}     callback.ticket     The requested ticket
 */
var getTicket = module.exports.getTicket = function(ticketId, callback) {
    Cassandra.runQuery('SELECT * FROM ArticleTickets USING CONSISTENCY QUORUM WHERE ticketId = ?', [ticketId], function(err, rows) {
        if (err) {
            log().error({'code': err.code, 'ticketId': ticketId, 'msg': err.msg}, 'Error while requesting ticket');
            return callback(err);
        }

        // Return an error if the requested ticket was not found
        if (rows[0].count <= 1) {
            return callback({'code': 404, 'msg': 'The requested ticket was not found'});
        }

        // Return the requested ticket
        return callback(null, rows);
    });
};

/**
 * Returns the tickets
 *
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        Error object containing error code and error message
 * @param  {Ticket[]}   callback.tickets    Array containing a ticket object for each available ticket for the user
 */
var getTickets = module.exports.getTickets = function(callback) {
    Cassandra.runQuery('SELECT * FROM ArticleTickets USING CONSISTENCY QUORUM', null, function(err, rows) {
        if (err) {
            log().error({'code': err.code, 'msg': err.msg}, 'Error while fetching tickets');
            return callback(err);
        }

        // Return an error if no tickets were found
        if (rows[0].count <= 1) {
            return callback({'code': 404, 'msg': 'The requested ticket was not found'});
        }

        // Return a collection of tickets
        return callback(null, rows);
    });
};

/**
 * Update a ticket
 *
 * @param  {String}     ticketId            The id of the ticket that needs to be updated
 * @param  {Object}     parameters          An object containing the ticket field updates to apply
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        Error object containing error code and error message
 * @param  {Ticket}     callback.ticket     The updated ticket
 */
var updateTicket = module.exports.updateTicket = function(ticketId, parameters, callback) {
    parameters = _.extend(parameters, {'lastModified': Date.now()});
    var query = Cassandra.constructUpsertCQL('ArticleTickets', 'ticketId', ticketId, parameters, 'QUORUM');
    Cassandra.runQuery(query.query, query.parameters, function(err, ticket) {
        if (err) {
            log().error({'code': err.code, 'ticketId': ticketId, 'msg': err.msg}, 'Error while updating ticket');
            return callback(err);
        }

        getTicket(ticketId, function(err, ticket) {
            if (err) {
                return callback(err);
            }

            return callback(null, ticket);
        });
    });
};
