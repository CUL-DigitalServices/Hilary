/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var ActivityTestsUtil = require('oae-activity/lib/test/util');
var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var TicketsConstants = require('../lib/constants').TicketsConstants;
var TicketsEmitter = require('../lib/internal/emitter');

describe('Tickets', function() {

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a cam tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a gt tenant admin
    var gtAdminRestContext = null;
    // Rest contexts that can be used every time we need to make a request as a tenant user
    var coenegoRestContext = null;
    var halRestContext = null;

    // Variable that stores a created ticket during the tests
    var createdTicket = null;

    /**
     * Initializes the admin/user REST contexts
     */
    before(function(callback) {

        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the cam admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the gt admin rest context
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        // Fill up the coenego and hal user rest context
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, camUsers, coenegoUser, halUser) {
            assert.ok(!err);
            assert.ok(camUsers);
            assert.ok(coenegoUser);
            assert.ok(halUser);
            coenegoRestContext = coenegoUser.restContext;
            halRestContext = halUser.restContext;
            callback();
        });
    });

    /**
     * Disabled the ticket implementation before each test
     */
    beforeEach(function(callback) {
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': false}, function(err) {
            assert.ok(!err);
            return callback();
        });
    });

    /**
     * Utility method that returns a stream that points to a PDF
     *
     * @return {Stream}     A stream that points to a PDF that can be uploaded
     */
    var getFileStream = function() {
        var file = __dirname + '/data/paper.pdf';
        return fs.createReadStream(file);
    };

    describe('Creating tickets', function(callback) {

        /**
         * Test that verifies that creating tickets is only allowed when enabled
         */
        it('verify creating tickets is only allowed when enabled', function(callback) {
            RestAPI.Content.createFile(coenegoRestContext, 'Article ' + Date.now(), 'Article description ' + Date.now(), 'private', getFileStream, [], [], function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj);
                return callback();
            });
        });

        /**
         * Test that verifies uploading an article creates a new ticket
         */
        it('verify uploading an article creates a new ticket', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                // Listen to the created ticket event
                var opts = null;
                TicketsEmitter.on(TicketsConstants.events.CREATED_TICKET, function(err, ticket) {
                    assert.ok(!err);
                    assert.ok(ticket);
                    assert.strictEqual(ticket[0][ticket[0]._map['creatorId']].value, opts.creatorId);
                    assert.strictEqual(ticket[0][ticket[0]._map['resourceId']].value, opts.resourceId);
                    assert.strictEqual(ticket[0][ticket[0]._map['tenantAlias']].value, opts.tenantAlias);
                    createdTicket = ticket;
                    return callback();
                });

                // Create a piece of content
                RestAPI.Content.createFile(coenegoRestContext, 'Article ' + Date.now(), 'Article description ' + Date.now(), 'private', getFileStream, [], [], function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj);

                    // Create a new ticket
                    opts = {
                        'creatorId': contentObj.createdBy,
                        'resourceId': contentObj.id,
                        'tenantAlias': contentObj.tenant.alias
                    };
                });
            });
        });
    });

    describe('Requesting tickets', function(callback) {

        /**
         * Test that verifies that requesting tickets is only allowed when enabled
         */
        it('verify requesting tickets is only allowed when enabled', function(callback) {
            var ticketId = createdTicket[0][createdTicket[0]._map['ticketId']].value;
            RestAPI.Tickets.getTicket(camAdminRestContext, ticketId, function(err, ticket) {
                assert.ok(err);
                assert.equal(err.code, 401);
                assert.equal(err.msg, 'Tickets are not enabled for tenant');
                assert.equal(ticket, null);
                return callback();
            });
        });

        /**
         * Test that verifies if a valid ticket ID is specified
         */
        it('verify a valid ticket ID is specified', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                RestAPI.Tickets.getTicket(camAdminRestContext, 'invalid_ticket_id', function(err, ticket) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.equal(err.msg, 'A valid ticket ID must be provided');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies requesting a non-existing ticket throws an error
         */
        it('verify requesting an non-existing ticket throws an error', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                var ticketId = 't:camtest:0123456789';
                RestAPI.Tickets.getTicket(camAdminRestContext, ticketId, function(err, ticket) {
                    assert.ok(err);
                    assert.equal(err.code, 404);
                    assert.equal(err.msg, 'The requested ticket was not found');
                    assert.equal(ticket, null);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies requesting a specific ticket is successful
         */
        it('verify requesting an existig ticket is successful', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                var ticketId = createdTicket[0][createdTicket[0]._map['ticketId']].value;
                RestAPI.Tickets.getTicket(camAdminRestContext, ticketId, function(err, ticket) {
                    assert.ok(!err);
                    assert.ok(_.isObject(ticket));
                    assert.equal(ticket[0][ticket[0]._map['created']].value, createdTicket[0][createdTicket[0]._map['created']].value);
                    assert.equal(ticket[0][ticket[0]._map['creatorId']].value, createdTicket[0][createdTicket[0]._map['creatorId']].value);
                    assert.equal(ticket[0][ticket[0]._map['resourceId']].value, createdTicket[0][createdTicket[0]._map['resourceId']].value);
                    assert.equal(ticket[0][ticket[0]._map['tenantAlias']].value, createdTicket[0][createdTicket[0]._map['tenantAlias']].value);
                    assert.equal(ticket[0][ticket[0]._map['ticketId']].value, createdTicket[0][createdTicket[0]._map['ticketId']].value);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies requesting tickets is successful
         */
        it('verify requesting tickets is successful', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);
                RestAPI.Tickets.getTickets(camAdminRestContext, function(err, tickets) {
                    assert.ok(!err);
                    assert.ok(_.isArray(tickets));
                    return callback();
                });
            });
        });
    });

    describe('Updating tickets', function(callback) {

        /**
         * Test that verifies that updating tickets is only allowed when enabled
         */
        it('verify updating tickets is only allowed when enabled', function(callback) {
            var ticketId = createdTicket[0][createdTicket[0]._map['ticketId']].value;
            var updateOpts = {'status': TicketsConstants.statusses.PENDING};
            RestAPI.Tickets.updateTicket(camAdminRestContext, ticketId, updateOpts, function(err, ticket) {
                assert.ok(err);
                assert.equal(err.code, 401);
                assert.equal(err.msg, 'Tickets are not enabled for tenant');
                assert.equal(ticket, null);
                return callback();
            });
        });

        /**
         * Test that verifies if a valid ticket ID is specified
         */
        it('verify a valid ticket ID is specified', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);
                var updateOpts = {'status': TicketsConstants.statusses.PENDING};
                RestAPI.Tickets.updateTicket(camAdminRestContext, 'invalid_ticket_id', updateOpts, function(err, ticket) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.equal(err.msg, 'A valid ticket ID must be provided');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies updating a ticket is successful
         */
        it('verify updating a ticket is successful', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);

                var ticketId = createdTicket[0][createdTicket[0]._map['ticketId']].value;
                var updateOpts = {'status': TicketsConstants.statusses.PENDING};
                RestAPI.Tickets.updateTicket(camAdminRestContext, ticketId, updateOpts, function(err, ticket) {
                    assert.ok(!err);
                    assert.ok(ticket);
                    assert.equal(ticket[0][ticket[0]._map['status']].value, TicketsConstants.statusses.PENDING);
                    return callback();
                });
            });
        });
    });

    describe('Deleting tickets', function(callback) {

        /**
         * Test that verifies that deleting tickets is only allowed when enabled
         */
        it('verify deleting tickets is only allowed when enabled', function(callback) {
            var ticketId = createdTicket[0][createdTicket[0]._map['ticketId']].value;
            RestAPI.Tickets.deleteTicket(camAdminRestContext, ticketId, function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);
                assert.equal(err.msg, 'Tickets are not enabled for tenant');
                return callback();
            });
        });

        /**
         * Test that verifies if a valid ticket ID is specified
         */
        it('verify a valid ticket ID is specified', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);
                RestAPI.Tickets.deleteTicket(camAdminRestContext, 'invalid_ticket_id', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.equal(err.msg, 'A valid ticket ID must be provided');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies deleting a ticket is successful
         */
        it('verify deleting a ticket is successful', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-tickets/general/enabled': true}, function(err) {
                assert.ok(!err);
                var ticketId = createdTicket[0][createdTicket[0]._map['ticketId']].value;
                RestAPI.Tickets.deleteTicket(camAdminRestContext, ticketId, function(err) {
                    assert.ok(!err);

                    // Search for the ticket that has been deleted
                    RestAPI.Tickets.getTicket(camAdminRestContext, ticketId, function(err, ticket) {
                        assert.ok(err);
                        assert.equal(err.code, 404);
                        assert.equal(err.msg, 'The requested ticket was not found');
                        assert.equal(ticket, null);
                        return callback();
                    });
                });
            });
        });
    });
});
