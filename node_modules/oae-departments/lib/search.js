/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var log = require('oae-logger').logger('oae-departments');
var SearchAPI = require('oae-search');

var DepartmentsAPI = require('./api');
var DepartmentsConstants = require('./constants').DepartmentsConstants;

// Register departments search
SearchAPI.registerSearch('departments', require('./searches/departments'));

////////////////////
// INDEXING TASKS //
////////////////////

/*!
 * When a department is created, we must index the department document
 */
DepartmentsAPI.on(DepartmentsConstants.events.CREATED_DEPARTMENT, function(ctx, department) {
    SearchAPI.postIndexTask('department', [department], {'resource': true}, function(err) {
        if (err) {
            log().error({'code': err.code, 'msg': err.msg, 'department': department}, 'Error while indexing department');
        }
    });
});

////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces search documents for 'department' resources.
 *
 * @param  {Context}        ctx             Standard context object containing the current user and the current tenant
 * @param  {Department[]}   departments     Collection of departments
 * @api private
 */
var _produceDepartmentSearchDocuments = function(departments, callback) {
    var departmentDocs = _.map(departments, function(department) {
        return {
            'resourceType': department.resourceType,
            'id': department.id,
            'tenantAlias': department.tenantAlias,
            'displayName': department.displayName,
            'q_high': department.displayName,
            'sort': department.displayName
        };
    });
    return callback(null, departmentDocs);
};

SearchAPI.registerSearchDocumentProducer('department', _produceDepartmentSearchDocuments);


///////////////////////////
//  DOCUMENT TRANSFORMER //
///////////////////////////

/**
 * Given an array of department search documents, transform them into search documents suitable to be displayed
 *
 * @param  {Context}   ctx             The current context
 * @param  {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @param  {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformDepartmentDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    _.each(docs, function(doc, docId) {
        transformedDocs[docId] = {
            'displayName': _.first(doc.fields.displayName),
            'tenantAlias': _.first(doc.fields.tenantAlias),
            'resourceType': 'department',
            'id': docId
        };
    });

    return callback(null, transformedDocs);
};

// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('department', _transformDepartmentDocuments);
