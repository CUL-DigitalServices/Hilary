/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var RestAPI = require('oae-rest');
var SearchAPI = require('oae-search');
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests/lib/util');

describe('Departments', function() {

    var anonymousCamRestContext = null;
    var anonymousGlobalRestContext = null;
    var camUserRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    var globalAdminRestContext = null;

    /**
     * Create rest contexts that can be used while running tests
     */
    before(function(callback) {
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Generate a Cambridge user
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, user) {
            camUserRestContext = user.restContext;
            callback();
        });
    });

    /**
     * Utility method that returns a stream that points to a CSV file
     *
     * @return {Stream}                     A stream that points to a CSV file that can be uploaded
     */
    var getFileStreamA = function() {
        var file = __dirname + '/data/departmentsA.csv';
        return fs.createReadStream(file);
    };

    /**
     * Utility method that returns a stream that points to a CSV file
     *
     * @return {Stream}                     A stream that points to a CSV file that can be uploaded
     */
    var getFileStreamB = function() {
        var file = __dirname + '/data/departmentsB.csv';
        return fs.createReadStream(file);
    };

    describe('Import departments', function() {

        /**
         * Test that verifies that parameters are verified when importing departments
         */
        it('verify parameters', function(callback) {

            // Verify parameter validation on the tenant router
            RestAPI.Departments.importDepartments(camAdminRestContext, null, function(err) {
                assert.equal(err.code, 400);

                RestAPI.Departments.importDepartments(camAdminRestContext, [], function(err) {
                    assert.equal(err.code, 400);

                    RestAPI.Departments.importDepartments(camAdminRestContext, {}, function(err) {
                        assert.equal(err.code, 400);

                        // Verify parameter validation on the global admin router
                        RestAPI.Departments.importDepartments(globalAdminRestContext, null, function(err) {
                            assert.equal(err.code, 400);

                            RestAPI.Departments.importDepartments(globalAdminRestContext, [], function(err) {
                                assert.equal(err.code, 400);

                                RestAPI.Departments.importDepartments(globalAdminRestContext, {}, function(err) {
                                    assert.equal(err.code, 400);

                                    // Verify that an error is thrown when no tenant alias was specified on the global admin router
                                    RestAPI.Departments.importDepartments(globalAdminRestContext, {'departments': getFileStreamA}, function(err) {
                                        assert.equal(err.code, 400);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that only authorized admins/users can import departments
         */
        it('verify permissions', function(callback) {
            RestAPI.Departments.importDepartments(anonymousGlobalRestContext, {'departments': getFileStreamA}, function(err) {
                assert.equal(err.code, 400);

                RestAPI.Departments.importDepartments(anonymousCamRestContext, {'departments': getFileStreamA}, function(err) {
                    assert.equal(err.code, 401);

                    RestAPI.Departments.importDepartments(camUserRestContext, {'departments': getFileStreamA}, function(err) {
                        assert.equal(err.code, 401);

                        RestAPI.Departments.importDepartments(camAdminRestContext, {'departments': getFileStreamA}, function(err) {
                            assert.ok(!err);

                            RestAPI.Departments.importDepartments(globalAdminRestContext, {'tenantAlias': global.oaeTests.tenants.cam.alias, 'departments': getFileStreamA}, function(err) {
                                assert.ok(!err);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that importing departments is successful
         */
        it('verify importing departments is successful', function(callback) {
            RestAPI.Departments.importDepartments(camAdminRestContext, {'departments': getFileStreamA}, function(err) {
                assert.ok(!err);

                SearchTestsUtil.searchRefreshed(camUserRestContext, 'departments', null, {'q': 'Department'}, function(err, data) {
                    assert.ok(!err);
                    assert.ok(data.total);
                    assert.ok(_.isArray(data.results));
                    _.each(data.results, function(department) {
                        assert.equal(department.resourceType, 'department');
                    });
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that importing the same CSV file twice on the same tenant doesn't result in having duplicates in the search results
         */
        it('verify that importing the same CSV file doesn\'t result in having duplicates', function(callback) {
            SearchTestsUtil.searchRefreshed(camUserRestContext, 'departments', null, {'q': 'Department'}, function(err, data1) {
                assert.ok(!err);

                RestAPI.Departments.importDepartments(camAdminRestContext, {'departments': getFileStreamA}, function(err) {
                    assert.ok(!err);

                    SearchTestsUtil.searchRefreshed(camUserRestContext, 'departments', null, {'q': 'Department'}, function(err, data2) {
                        assert.ok(!err);
                        assert.equal(data1.total, data2.total);
                        assert.equal(data1.results.length, data2.results.length);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that imported departments are bound to tenants and have a tenant-bound identifier in their ID
         */
        it('verify that imported departments have a specific, tenant-bound identifier', function(callback) {
            SearchTestsUtil.searchRefreshed(camUserRestContext, 'departments', null, {'q': 'Department'}, function(err, data1) {
                assert.ok(!err);
                assert.ok(data1.results);
                _.each(data1.results, function(department) {
                    assert.equal(department.resourceType, 'department');
                    assert.equal(department.id.split(':')[1], global.oaeTests.tenants.cam.alias);
                });

                RestAPI.Departments.importDepartments(gtAdminRestContext, {'departments': getFileStreamB}, function(err) {
                    assert.ok(!err);

                    SearchTestsUtil.searchRefreshed(gtAdminRestContext, 'departments', null, {'q': 'dept'}, function(err, data2) {
                        assert.ok(!err);
                        assert.ok(data2.results);

                        _.each(data2.results, function(department) {
                            assert.equal(department.resourceType, 'department');
                            assert.equal(department.id.split(':')[1], global.oaeTests.tenants.gt.alias);
                        });
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that the departments' identifiers are wellformed when importing the same CSV file for different tenants
         */
        it('verify that the departments\' identifiers are wellformed and tenant-bound when importing the same CSV file for different tenants', function(callback) {
            RestAPI.Departments.importDepartments(camAdminRestContext, {'departments': getFileStreamA}, function(err) {
                assert.ok(!err);

                SearchTestsUtil.searchRefreshed(camAdminRestContext, 'departments', null, {'q': 'Department'}, function(err, data1) {
                    assert.ok(!err);
                    assert.ok(data1.results);
                    _.each(data1.results, function(department) {
                        assert.equal(department.resourceType, 'department');
                        assert.equal(department.id.split(':')[0], 'd');
                        assert.equal(department.id.split(':')[1], global.oaeTests.tenants.cam.alias);
                    });

                    RestAPI.Departments.importDepartments(gtAdminRestContext, {'departments': getFileStreamA}, function(err) {
                        assert.ok(!err);

                        SearchTestsUtil.searchRefreshed(gtAdminRestContext, 'departments', null, {'q': 'Dept'}, function(err, data2) {
                            assert.ok(!err);
                            assert.ok(data2.results);
                            _.each(data2.results, function(department) {
                                assert.equal(department.resourceType, 'department');
                                assert.equal(department.id.split(':')[0], 'd');
                                assert.equal(department.id.split(':')[1], global.oaeTests.tenants.gt.alias);
                            });
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
