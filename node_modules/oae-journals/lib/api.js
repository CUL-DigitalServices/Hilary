/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var csv = require('csv');
var Validator = require('oae-util/lib/validator').Validator;

var ConfigAPI = require('oae-config');
var log = require('oae-logger').logger('oae-principals');

var JournalsConfig = ConfigAPI.config('oae-journals');
var JournalsConstants = require('oae-journals/lib/constants').JournalsConstants;
var JournalsEmitter = require('oae-journals/lib/internal/emitter');
var JournalsModels = require('oae-journals/lib/model');

/**
 * Import a collection of journals
 *
 * @param  {Context}        ctx                     Standard context object containing the current user and the current tenant
 * @param  {Object}         journalsCSV             File object representing the uploaded CSV file as returned by Express
 * @param  {Function}       callback                Standard callback method
 * @param  {Object}         callback.err            Standard error object
 */
var importJournals = module.exports.importJournals = function(ctx, journalsCSV, callback) {
    if (!_canEnterData(ctx)) {
        return callback({'code': 401, 'msg': 'Only authorized users are allowed to import journals'});
    }

    var validator = new Validator();
    validator.check(journalsCSV, {'code': 400, 'msg': 'A CSV file must be provided'}).notNull();
    if (journalsCSV) {
        validator.check(journalsCSV.size, {'code': 400, 'msg': 'Missing size on the CSV file'}).notEmpty();
        validator.check(journalsCSV.size, {'code': 400, 'msg': 'Invalid size on the CSV file'}).isInt();
        validator.check(journalsCSV.size, {'code': 400, 'msg': 'Invalid size on the CSV file'}).min(0);
        validator.check(journalsCSV.name, {'code': 400, 'msg': 'Missing name on the CSV file'}).notEmpty();
    }
    if (validator.hasErrors()) {
        log().error({'err': validator.getFirstError()}, 'Error while importing journals from .CSV file');
        return callback(validator.getFirstError());
    }

    // Read and parse the CSV file into an array
    csv().from.path(journalsCSV.path).to.array(function(journalsData) {

        // Concatinate the print- and electronic ISSN's for each journal
        var journalsCollection = _.map(journalsData, function(journal) {
            return new JournalsModels.Journal(_concatJournalIds(journal[1], journal[2]), journal[0]);
        });

        // Ingest the journals
        _ingestJournals(ctx, journalsCollection);

        return callback();
    });
};

/**
 * Function that concatinates the journal's ISSN's
 *
 * @param  {String}     printISSN           The print ISSN of the journal
 * @param  {String}     electronicISSN      The electronic ISSN of the journal
 * @return {String}                         The concatinated ISSN's
 * @api private
 */
var _concatJournalIds = function(printISSN, electronicISSN) {
    return _.compact([printISSN, electronicISSN]).join(', ');
};

/**
 * Function that ingests journals into ElasticSearch
 *
 * @param  {Context}        ctx                     Standard context object containing the current user and the current tenant
 * @param  {Journal[]}      journalsCollection      Collection of journals
 */
var _ingestJournals = function(ctx, journalsCollection) {
    log().info('Starting journal import from CSV');
    _.each(journalsCollection, function(journal) {
        JournalsEmitter.emit(JournalsConstants.events.CREATED_JOURNAL, ctx, journal);
    });
};

/**
 * Function that checks if the current user is allowed to enter data
 *
 * @param  {Context}        ctx             Standard context object containing the current user and the current tenant
 * @return {Boolean}                        Whether or not the user is allowed to enter data
 */
var _canEnterData = function(ctx) {
    if (!ctx.user()) {
        return false;
    }

    // Global admins are always allowed to import journals
    if (ctx.user().isGlobalAdmin()) {
        return true;
    }

    // Tenant admins are only allowed to import journals when the journals module is enabled for tenant
    if (ctx.user().isAdmin(ctx.tenant().alias) && JournalsConfig.getValue(ctx.tenant().alias, 'general', 'enabled')) {
        return true;
    }

    // Deny if none of the above applies
    return false;
};
