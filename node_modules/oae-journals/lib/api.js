/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var csv = require('csv');
var fs = require('fs');

var ConfigAPI = require('oae-config');
var log = require('oae-logger').logger('oae-principals');
var Validator = require('oae-util/lib/validator').Validator;

var Journal = require('oae-journals/lib/model').Journal;
var JournalsConfig = ConfigAPI.config('oae-journals');
var JournalsConstants = require('oae-journals/lib/constants').JournalsConstants;

//////////////////
//  PUBLIC API  //
//////////////////

/**
 * ### Events
 *
 * The `JournalsAPI`, as enumerated in `JournalsConstants.events`, emits the following events:
 *
 * * `createdJournal(ctx, journal)`: A new journal item was created. The `ctx` and the `journal` object that was created are both provided.
 */
var JournalsAPI = module.exports = new events.EventEmitter();

/**
 * Import a collection of journals
 *
 * The CSV file should be constructed in a way that the first `value` contains the name of the journal.
 * The second and third `value` contain the "print ISSN" and/or the "electronic ISSN".
 *
 *  * Example of CSV rows:
 *  *
 *  * AAOHN Journal,0891-0162
 *  * AAPS PharmSciTech,1530-9932,1522-1059
 *  * Abdominal Imaging,0942-8925,1432-0509
 *
 * @param  {Context}        ctx                     Standard context object containing the current user and the current tenant
 * @param  {Object}         journalsCSV             File object representing the uploaded CSV file as returned by Express
 * @param  {Function}       callback                Standard callback method
 * @param  {Object}         callback.err            Standard error object
 */
var importJournals = module.exports.importJournals = function(ctx, journalsCSV, callback) {
    if (!_canEnterData(ctx)) {
        return _cleanUpCSVFile(journalsCSV, function() {
            callback({'code': 401, 'msg': 'Only global administrators are allowed to import journals'});
        });
    }

    var validator = new Validator();
    validator.check(journalsCSV, {'code': 400, 'msg': 'A CSV file must be provided'}).notNull();
    if (journalsCSV) {
        validator.check(journalsCSV.size, {'code': 400, 'msg': 'Missing size on the CSV file'}).notEmpty();
        validator.check(journalsCSV.size, {'code': 400, 'msg': 'Invalid size on the CSV file'}).isInt();
        validator.check(journalsCSV.size, {'code': 400, 'msg': 'Empty CSV files cannot be uploaded'}).min(0);
        validator.check(journalsCSV.name, {'code': 400, 'msg': 'Missing name on the CSV file'}).notEmpty();
    }
    if (validator.hasErrors()) {
        log().error(validator.getFirstError(), 'Error while importing journals from .CSV file');
        return _cleanUpCSVFile(journalsCSV, function() {
            callback(validator.getFirstError());
        });
    }

    // Read and parse the CSV file into an array
    csv().from.path(journalsCSV.path).to.array(function(journalsData) {

        // Remove the CSV file after the data has been parsed
        _cleanUpCSVFile(journalsCSV, function() {

            // Concatinate the print- and electronic ISSN's for each journal
            var journalsCollection = _.map(journalsData, function(journal) {

                // Construct a journal identifier
                var journalId = _concatJournalIds(journal[1], journal[2]);

                // Validate the generated identifier
                var validator = new Validator();
                validator.check(journalId, {'code': 400, 'msg': 'An error occurred while generating a journal ID'}).notEmpty();
                if (validator.hasErrors()) {
                    return _cleanUpCSVFile(journalsCSV, function() {
                        callback(validator.getFirstError());
                    });
                }

                return new Journal(journalId, journal[0]);
            });

            // Ingest the journals
            _ingestJournals(ctx, journalsCollection);

            return callback();
        });

    // Remove the CSV file when an error occurred
    }).on('error', function(err) {
        return _cleanUpCSVFile(journalsCSV, function() {
            callback({'code': 500, 'msg': err.message});
        });
    });
};

//////////////////////////
//  INTERNAL FUNCTIONS  //
//////////////////////////

/**
 * Function that cleans up and concatinates the journal's ISSN's
 *
 * @param  {String}         printISSN               The print ISSN of the journal
 * @param  {String}         electronicISSN          The electronic ISSN of the journal
 * @return {String}                                 The concatinated ISSN's
 * @api private
 */
var _concatJournalIds = function(printISSN, electronicISSN) {
    printISSN = printISSN.trim();
    electronicISSN = electronicISSN.trim();
    return _.compact([printISSN, electronicISSN]).join('-');
};

/**
 * Function that ingests journals into ElasticSearch
 *
 * @param  {Context}        ctx                     Standard context object containing the current user and the current tenant
 * @param  {Journal[]}      journalsCollection      Collection of journals
 */
var _ingestJournals = function(ctx, journalsCollection) {
    log().info('Starting journal import from CSV');
    _.each(journalsCollection, function(journal) {
        JournalsAPI.emit(JournalsConstants.events.CREATED_JOURNAL, ctx, journal);
    });
};

/**
 * Remove an uploaded journals CSV file
 * TODO: Move this out into a utility as this functionality is needed in a number of places
 *
 * @param  {Object}         journalsCSV             File object representing the uploaded CSV file as returned by Express
 * @param  {Function}       callback                Standard callback function
 * @api private
 */
var _cleanUpCSVFile = function(journalsCSV, callback) {
    if (journalsCSV && journalsCSV.path) {
        fs.exists(journalsCSV.path, function(exists) {
            if (exists) {
                fs.unlink(journalsCSV.path, function(err) {
                    if (err) {
                        log().warn({'err': err, 'file': journalsCSV}, 'Could not remove the journals import CSV file');
                    }
                    callback();
                });
            } else {
                callback();
            }
        });
    } else {
        callback();
    }
};

/////////////////////
//  AUTHORIZATION  //
/////////////////////

/**
 * Verify that the current user is a global admin
 *
 * @param  {Context}        ctx             Standard context object containing the current user and the current tenant
 * @return {Boolean}                        Whether or not the user is allowed to enter data
 */
var _canEnterData = function(ctx) {
    return (ctx.user() && ctx.user().isGlobalAdmin);
};
