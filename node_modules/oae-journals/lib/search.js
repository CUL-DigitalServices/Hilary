/*!
 * Copyright 2014 Digital Services, University of Cambridge Licensed
 * under the Educational Community License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var events = require('events');

var log = require('oae-logger').logger('oae-journals');
var SearchAPI = require('oae-search');

var JournalsAPI = require('./api');
var JournalsConstants = require('./constants').JournalsConstants;

// Register the journals search
SearchAPI.registerSearch('journals', require('./searches/journals'));

////////////////////
// INDEXING TASKS //
////////////////////

/*!
 * When a journal is created, we must index the journal document
 */
JournalsAPI.on(JournalsConstants.events.CREATED_JOURNAL, function(ctx, journal) {
    SearchAPI.postIndexTask('journal', [journal], {'resource': true}, function(err) {
        if (err) {
            log().error({'code': err.code, 'msg': err.msg, 'journal': journal}, 'Error while indexing journal');
        }
    });
});

////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces search documents for 'journal' resources.
 *
 * @param  {Context}        ctx             Standard context object containing the current user and the current tenant
 * @param  {Journal[]}      journals        Collection of journals
 * @api private
 */
var _produceJournalSearchDocuments = function(journals, callback) {
    var journalDocs = _.map(journals, function(journal) {
        return {
            'resourceType': journal.resourceType,
            'id': journal.id,
            'displayName': journal.displayName,
            'q_high': journal.displayName,
            'sort': journal.displayName
        };
    });
    callback(null, journalDocs);
};

SearchAPI.registerSearchDocumentProducer('journal', _produceJournalSearchDocuments);


///////////////////////////
//  DOCUMENT TRANSFORMER //
///////////////////////////

/**
 * Given an array of journal search documents, transform them into search documents suitable to be displayed
 *
 * @param  {Context}   ctx             The current context
 * @param  {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @param  {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformJournalDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    _.each(docs, function(doc, docId) {
        transformedDocs[docId] = {
            'displayName': _.first(doc.fields.displayName),
            'resourceType': 'journal',
            'id': docId
        };
    });

    return callback(null, transformedDocs);
};

// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('journal', _transformJournalDocuments);
