/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var LogAPI = require('oae-logger');
var PublicationsAPI = require('oae-publications/lib/api');
var TicketsConstants = require('oae-tickets/lib/constants').TicketsConstants;
var TicketsEmitter = require('oae-tickets/lib/internal/emitter');
var UserAPI = require('oae-principals/lib/api.user');
var Validator = require('oae-util/lib/validator').Validator;

var Config = require('./internal/config');
var Templates = require('./templates');
var Zendesk = require('oae-tickets-zendesk/lib/internal/zendesk');
var EventHandlers = require('oae-tickets-zendesk/lib/internal/eventhandlers');

/**
 * This module implements the public interface of the oae-tickets-zendesk
 * package.
 *
 * @param  {Object}  [options]  Optionally specify alternate dependency implementations.
 * @api private
 */
var TicketsZendeskAPI = exports.TicketsZendeskAPI = function TicketsZendeskAPI(options) {
    var that = {};

    options = options || {};
    var config = options.config || Config;
    var zendesk = options.zendesk || Zendesk;
    var userapi = options.userapi || UserAPI;
    var publicationsAPI = options.publicationsAPI || PublicationsAPI;
    var eventHandlers = options.eventHandlers || EventHandlers;
    var ticketsEmitter = options.ticketsEmitter || TicketsEmitter;
    var log = options.log || LogAPI.logger('oae-tickets-zendesk');

    that.bindTicketEventHandlers = function() {
        ticketsEmitter.on(TicketsConstants.events.CREATED_TICKET, eventHandlers.onTicketCreated);
    };

    that.createZendeskTicket = function(ctx, oaeTicket, callback) {
        var client = zendesk.zendeskClientFromOAEConfig(ctx);
        if (client === undefined) {
            return callback({'code': 400, 'msg': 'Unable to create zendesk client. Check module configuration.'});
        }

        var groupID = config.getZendeskGroupID(ctx.user().tenant.alias);
        if (groupID === undefined) {
            return callback({'code': 400, 'msg': 'No valid groupID is set'});
        }

        // Need to fetch the user who created the ticket to send their details
        // with the ticket.
        var user = userapi.getUser(ctx, oaeTicket.createdBy, function(err, user) {

            if (err) {
                log().error({
                    'err': err,
                    'oaeTicket': oaeTicket,
                }, 'Error fetching ticket\'s user');
                return callback({'code': 500, 'msg': 'Error fetching ticket\'s user'});
            }

            var publication = publicationsAPI.getPublication(ctx, oaeTicket.publicationId, function(err, publication) {
                if (err) {
                    log().error({
                        'err': err,
                        'oaeTicket': oaeTicket
                    }, 'Error fetching ticket\'s publication');
                    return callback({'code': 500, 'msg': 'Error fetching ticket\'s publication'});
                }

                var zendeskUser = that._getOrCreateZendeskUser(client, user.displayName, user.email, function(err, zendeskUser) {

                    if (err) {
                        log().error({
                            'err': err,
                            'email': user.email
                        }, 'Error creating zendesk user');
                        return callback({'code': 500,  'msg': 'Error creating zendesk user', 'cause': err});
                    }

                    var zendeskTicket = that._zendeskTicket(oaeTicket, zendeskUser.id, groupID, user, ctx.user().tenant, publication);

                    client.tickets.create(zendeskTicket, function(err, req, result) {
                        if (err) {
                            log().error({
                                'err': err,
                                'oaeTicket': oaeTicket,
                                'zendeskTicket': zendeskTicket,
                                'publication': publication,
                                'client': client
                            }, 'Error creating ticket on zendesk.com');
                            return callback({'code': 500, 'msg': 'Error creating ticket on zendesk.com'});
                        }
                        return callback(null, result);
                    });
                });
            });
        });
    };

    /**
     * Get the zendesk user for the specified email address, creating it
     * if it doesn't already exit. The name is not used to find users,
     * but will be used when creating a user is necessary.
     *
     * @param  {Object}     client          A node-zendesk API client object
     * @param  {String}     name            The full name of the user
     * @param  {String}     email           The user's email
     * @param  {Function}   callback        Standard callback function
     * @param  {Object}     callback.err    Standard error object
     * @param  {Object}     callback.user   A Zendesk user object (no {user: {...}} wrapper)
     * @api private
     */
    that._getOrCreateZendeskUser = function(client, name, email, callback) {
        var validator = new Validator();
        validator.check(email).isEmail();
        if (validator.hasErrors()) {
            log().error({
                email: email
            }, 'Cannot search for an invalid email address');
            return callback({'code': 400, 'msg': 'Cannot search for an invalid email address'});
        }

        // If query string is an email, zendesk seems to only match users w/
        // the exact matching email address.
        client.users.search({query: email}, function(err, status, data) {
            if (err) {
                log().error({
                    err: err,
                    email: email
                }, 'error searching for user');
                return callback({'code': 500, 'err': 'error searching for user'});
            }
            if (data.length) {
                // No need to create a user as one already exists
                return callback(null, data[0]);
            }

            // Create user
            client.users.create({
                    user: {
                        name: name,
                        email: email
                    }
                }, function(err, status, data) {
                    if (err) {
                        log().error({
                            err: err,
                            name: name,
                            email: email
                        }, 'error creating user');
                        return callback({'code': 500, 'msg': 'error creating user'});
                    }
                    if (status !== 201) {
                        log().error({
                            status: status,
                            data: data
                        }, 'Unexpected response from Zendesk API, expected 201 Created');
                        return callback({'code': 500, 'msg': 'Unexpected response from Zendesk API, expected 201 Created'});
                    }

                    return callback(null, data);
                }
            );
        });
    };

    that._zendeskTicket = function(oaeTicket, requesterID, groupID, user, tenant, publication) {
        return {
            ticket: {
                'group_id': groupID,
                'requester_id': requesterID,
                'external_id': oaeTicket.id,
                'description': Templates.zendeskTicketBodyTemplate({
                    'user': user,
                    'tenant': tenant,
                    'publication': publication,
                    'oaeTicket': oaeTicket,
                    'groupID': groupID
                })
            }
        };
    };

    return that;
};

// Create the default instance of the API with default options.
var defaultTicketsZendeskAPI = new TicketsZendeskAPI();

// Export the public methods of the default zendesk ticket API for typical use

/**
 * Registers the oae-tickets-zendesk package's ticket event handlers to
 * listen for ticket events fired by oae-tickets.
 * @api private
 */
exports.bindTicketEventHandlers = defaultTicketsZendeskAPI.bindTicketEventHandlers;

/**
 * Create a ticket on a tenant's Zendesk instance from an OAE ticket.
 *
 * The ticket is sent to the zendesk instance configured in the tenant
 * implied by the passed context. The ticket's reporter is the user who
 * created the OAE ticket. A zendesk user is created using the user's
 * email if a user with the email does not already exist in Zendesk.
 *
 * @param  {Context}    ctx                         The context of the current request
 * @param  {Ticket}     oaeTicket                   The ticket to forward to Zendesk
 * @param  {Function}   fn.callback                 Standard callback function
 * @param  {Object}     fn.callback.err             Error object containg the error code and the error message
 * @param  {Object}     fn.callback.zendeskTicket   The ticket created on zendesk.
 */
exports.createZendeskTicket = defaultTicketsZendeskAPI.createZendeskTicket;
