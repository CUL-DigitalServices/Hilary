/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var Config = require('./config');
var log = require('oae-logger').logger('oae-tickets-zendesk');
var TicketsZendeskAPI = require('oae-tickets-zendesk/lib/api');


/**
 * This module defines handlers for events which the oae-tickets-zendesk
 * package listens for.
 *
 * @api private
 */
var EventHandlers = exports.EventHandlers = function(options) {
    _.bindAll(this, 'onTicketCreated');

    options = options || {};
    this.config = options.config || Config;
    this.ticketsZendeskAPI = options.ticketsZendeskAPI || TicketsZendeskAPI;
    this.log = options.log || log;
};
_.extend(EventHandlers.prototype, {

    'onTicketCreated': function(ctx, ticket) {
        this.log().debug(util.inspect(ctx.user().tenant), 'onTicketCreated()');
        var tenantAlias = ctx.user().tenant.alias;

        var _this = this;

        if (this.config.isZendeskForwardingEnabled(tenantAlias)) {
            this.ticketsZendeskAPI.createZendeskTicket(ctx, ticket, function(err, zendeskTicket) {
                if(err) {
                    _this.log().error({
                        'err': err,
                        'oaeTicket': ticket
                    }, 'error creating zendesk ticket');
                } else {
                    _this.log().info({
                        'oaeTicket': ticket,
                        'zendeskTicket': zendeskTicket
                    }, 'created zendesk ticket');
                }
            });
        }
    }
});

// Export the public methods of the default EventHandlers instance
var defaultEventHandlers = new EventHandlers();

/**
 * Handles the oae-tickets' CREATED_TICKET event.
 *
 * @param  {Object}     ctx           The current context
 * @param  {Ticket}     ticket        The created ticket
 */
exports.onTicketCreated = defaultEventHandlers.onTicketCreated;
