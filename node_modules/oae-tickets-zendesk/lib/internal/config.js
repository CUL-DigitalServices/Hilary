/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var ConfigAPI = require('oae-config');
var LogAPI = require('oae-logger');
var Validator = require('oae-util/lib/validator').Validator;


var log = LogAPI.logger('oae-tickets-zendesk');
var TicketsZendeskConfig = ConfigAPI.config('oae-tickets-zendesk');


var ZENDESK_URL_FORMAT = "https://%s.zendesk.com/api/v2/";

/**
 * This module is responsible for fetching and validating user supplied
 * configuration for the oae-tickets-zendesk package. All functions return
 * undefined if the user supplied configuration value is invalid.
 *
 * @api private
 */
var Config = exports.Config = function(options) {
    _.bindAll(this, 'isZendeskForwardingEnabled', 'getZendeskSubdomain', 'getZendeskEmail', 'getZendeskGroupID', 'getZendeskApiToken', 'getZendeskUrl');

    options = options || {};
    this.log = options.log || log;
    this.configAPI = options.configAPI || TicketsZendeskConfig;
};
_.extend(Config.prototype, {

    'isZendeskForwardingEnabled': function(tenantAlias) {
        var isZendeskForwardingEnabled = this._getConfigValue(tenantAlias, 'forwardToZendesk');

        var validator = new Validator();
        validator.check().isBoolean(isZendeskForwardingEnabled);

        return this._stripInvalidConfigValue(isZendeskForwardingEnabled, 'forwardToZendesk', validator, tenantAlias);
    },

    'getZendeskSubdomain': function(tenantAlias) {
        var subdomain = this._getConfigValue(tenantAlias, 'zendeskSubdomain');

        var validator = new Validator();
        validator.check(subdomain).regex("^[a-zA-Z0-9-]+$");

        return this._stripInvalidConfigValue(subdomain, 'zendeskSubdomain', validator, tenantAlias);
    },

    'getZendeskEmail': function(tenantAlias) {
        var email = this._getConfigValue(tenantAlias, 'zendeskUserEmail');

        var validator = new Validator();
        validator.check(email).isEmail();

        return this._stripInvalidConfigValue(email, 'zendeskUserEmail', validator, tenantAlias);
    },

    'getZendeskGroupID': function(tenantAlias) {
        var groupID = this._getConfigValue(tenantAlias, 'zendeskGroupID');

        var validator = new Validator();
        validator.check(groupID).isInt();

        return this._stripInvalidConfigValue(groupID, 'zendeskGroupID', validator, tenantAlias);
    },

    'getZendeskApiToken': function(tenantAlias) {
        var apiToken = this._getConfigValue(tenantAlias, 'zendeskApiToken');

        var validator = new Validator();
        validator.check(apiToken).notEmpty();

        return this._stripInvalidConfigValue(apiToken, 'zendeskApiToken', validator, tenantAlias);
    },

    'getZendeskUrl': function(tenantAlias) {
        var subdomain = this.getZendeskSubdomain(tenantAlias);

        if (subdomain === undefined) {
            return undefined;
        }

        return util.format(ZENDESK_URL_FORMAT, subdomain);
    },

    '_getConfigValue': function(tenantAlias, name) {
        return this.configAPI.getValue(tenantAlias, 'tickets-zendesk', name);
    },

    '_stripInvalidConfigValue': function(configValue, configKey, validator, tenantAlias) {
        if (validator.hasErrors()) {
            log().error({
                'err': validator.getErrors(),
                'tenantAlias': tenantAlias,
                'configKey': configKey,
                'configValue': configValue,
            }, util.format('"%s" config item was invalid', configKey));
            return undefined;
        }
        return configValue;
    }
});

// Export the public methods of the default Config instance
var defaultConfig = new Config();

/**
 * Whether forwarding OAE tickets to Zendesk has been enabled.
 *
 * @return  {Boolean|undefined}
 */
exports.isZendeskForwardingEnabled = defaultConfig.isZendeskForwardingEnabled;

/**
 * Gets the configured subdomain under zendesk.com that tickets should
 * be forwarded to.
 *
 * @return  {String|undefined}  A subdomain
 */
exports.getZendeskSubdomain = defaultConfig.getZendeskSubdomain;

/**
 * Gets the configured email address of the user account that should be
 * used to access the zendesk API.
 *
 * @return  {String|undefined}  An email address
 */
exports.getZendeskEmail = defaultConfig.getZendeskEmail;

/**
 * Gets the configured ID of the group that created tickets should belong
 * to in zendesk.
 *
 * @return  {Number}  The integer group ID
 */
exports.getZendeskGroupID = defaultConfig.getZendeskGroupID;

/**
 * Gets the configured API token to use when authenticating with the
 * zendesk API.
 *
 * @return  {String}  An API token.
 */
exports.getZendeskApiToken = defaultConfig.getZendeskApiToken;

/**
 * Gets the base URL of the zendesk API based on the configured zendesk
 * subdomain.
 *
 * @return  {String}  The zendesk API's base url
 */
exports.getZendeskUrl = defaultConfig.getZendeskUrl;
