/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var Ticket = require('oae-tickets/lib/model').Ticket;

var Config = require('oae-tickets-zendesk/lib/internal/config');
var EventHandlers = require('oae-tickets-zendesk/lib/internal/eventhandlers');
var TestUtils = require('./util');

var MockConfigAPI = TestUtils.MockConfigAPI;

function MockTicketsZendeskApi() {
    _.bindAll(this, 'createZendeskTicket');

    this.createZendeskTicketCalls = 0;
}
MockTicketsZendeskApi.prototype.createZendeskTicket = function() {
    this.createZendeskTicketCalls++;
};


describe('EventHandlers', function() {

    describe('#onTicketCreated()', function() {

        /**
         * Count the number of times TicketsZendeskAPI.createZendeskTicket is
         * called when a CREATED_TICKET event is received by EventHandlers.
         *
         * @param  {Boolean}    forwardingEnabled  Whether the OAE config should have forwarding enabled
         * @return {Number}     The number of times createZendeskTicket was called
         */
        function countCreateZendeskTicketCalls(forwardingEnabled) {
            // Create a mock configuration with forwarding disabled
            var oaeConfig = new MockConfigAPI({
                forwardToZendesk: forwardingEnabled
            });
            var config = new Config.Config({
                configAPI: oaeConfig
            });

            var mockTicketsZendeskApi = new MockTicketsZendeskApi();

            // Create an instance of EventHandlers using our config & mock zendesk API
            var eventHandlers = new EventHandlers.EventHandlers({
                ticketsZendeskAPI: mockTicketsZendeskApi,
                config: config
            });

            var fakeContext = {
                user: function() {
                    return {
                        tenant: {
                            alias: 'some-alias'
                        }
                    };
                }
            };

            var ticket = new Ticket();

            // Should have no calls so far...
            assert.strictEqual(mockTicketsZendeskApi.createZendeskTicketCalls, 0);

            eventHandlers.onTicketCreated(fakeContext, ticket);

            return mockTicketsZendeskApi.createZendeskTicketCalls;
        }

        /**
         * Test that verifies that onTicketCreated() should not create a zendesk ticket when disabled.
         */
        it('should not create a zendesk ticket when disabled', function() {
            var createZendeskTicketCallCount = countCreateZendeskTicketCalls(false);

            assert.strictEqual(createZendeskTicketCallCount, 0);
        });

        /**
         * Test that verifies that onTicketCreated() should create a zendesk ticket when enabled.
         */
        it('should create a zendesk ticket when enabled', function() {
            var createZendeskTicketCallCount = countCreateZendeskTicketCalls(true);

            assert.strictEqual(createZendeskTicketCallCount, 1);
        });
    });
});
