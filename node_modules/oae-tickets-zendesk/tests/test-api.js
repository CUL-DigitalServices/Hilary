/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var util = require('util');
var _ = require('underscore');

var TenantModel = require('oae-tenants/lib/model').Tenant;
var TicketModel = require('oae-tickets/lib/model').Ticket;
var UserModel = require('oae-principals/lib/model.user').User;

var TicketsZendeskAPI = require('oae-tickets-zendesk/lib/api');
var Config = require('oae-tickets-zendesk/lib/internal/config');
var TestUtils = require('./util');


var MockConfigAPI = TestUtils.MockConfigAPI;

function MockZendesk(zendeskClient) {
    this.zendeskClient = zendeskClient;
}
MockZendesk.prototype.zendeskClientFromOAEConfig = function(ctx) {
    return this.zendeskClient;
};

describe('ZendeskTicketAPI', function() {
    describe('#createZendeskTicket()', function() {

        it('should call tickets.create() with expected data', function(callback) {
            var expectedGroupID = 1234;
            var createCallCount = 0;
            var userEmail = 'foo@example.com';
            var zendeskUserId = 5678;

            // Create a mock configuration with forwarding disabled
            var oaeConfig = new MockConfigAPI({
                forwardToZendesk: true,
                zendeskGroupID: expectedGroupID
            });
            var config = new Config.Config({
                configAPI: oaeConfig
            });

            var oaeTicket = new TicketModel(
                'ticketid',
                'externalid',
                'tenantalias',
                'publicationid',
                'some:user',
                new Date(2014, 1, 1).valueOf(),
                new Date(2014, 1, 1).valueOf()
            );

            var fakeContext = {
                user: function() {
                    return {
                        tenant: {
                            alias: 'some-alias'
                        }
                    };
                }
            };

            var mockZendeskClient = {
                tickets: {
                    create: function(zendeskTicket, callback) {
                        createCallCount++;

                        assert.ok(zendeskTicket.ticket.group_id, expectedGroupID);
                        assert.ok(_.isString(zendeskTicket.ticket.description));
                        assert.ok(zendeskTicket.ticket.description.length > 0);

                        callback(null, null, zendeskTicket);
                    }
                },
                users: {
                    search: function(query, callback) {
                        assert.ok(_.isEqual(query, {query: userEmail}));
                        var user = {
                            id: zendeskUserId,
                            email: userEmail
                        };
                        return callback(null, 201, [user]);
                    }
                }
            };

            var mockPublicationsAPI = {
                getPublication: function(ctx, publicationID, callback) {
                    var publication = {};
                    callback(null, publication);
                }
            };

            var mockUserApi = {
                getUser: function(ctx, userID, callback) {
                    var user = {
                        id: userID,
                        displayName: "Jim Bob",
                        email: userEmail
                    };
                    callback(null, user);
                }
            };

            var zendesk = new MockZendesk(mockZendeskClient);

            var api = new TicketsZendeskAPI.TicketsZendeskAPI({
                config: config,
                zendesk: zendesk,
                userapi: mockUserApi,
                publicationsAPI: mockPublicationsAPI
            });

            api.createZendeskTicket(fakeContext, oaeTicket, function(err, result) {
                assert.ok(!err, util.inspect(err));

                // We should have had one call to tickets.create()
                assert.ok(createCallCount, 1);
                callback();
            });
        });
    });

    describe('#_getOrCreateZendeskUser()', function() {

        it('should create a new user if the user does not exist', function(callback) {
            var userID = 123;
            var userEmail = 'foo@example.com';
            var mockClient = {
                users: {
                    search: function(query, callback) {
                        assert.ok(_.isEqual(query, {query: userEmail}));
                        var user = {
                            id: userID,
                            email: userEmail,
                        };
                        return callback(null, 200, [user]);
                    }
                }
            };

            var api = new TicketsZendeskAPI.TicketsZendeskAPI();
            api._getOrCreateZendeskUser(mockClient, 'Some Name', userEmail, function(err, user) {
                assert.strictEqual(user.id, userID);
                assert.strictEqual(user.email, userEmail);
                callback();
            });
        });

        it('should return the existing user if one exists', function(callback) {
            var userID = 123;
            var userName = 'Some Name';
            var userEmail = 'foo@example.com';
            var mockClient = {
                users: {
                    search: function(query, callback) {
                        return callback(null, 200, []);
                    },
                    create: function(user, callback) {
                        assert.strictEqual(user.user.name, userName);
                        assert.strictEqual(user.user.email, userEmail);

                        var createdUser = {
                            id: userID,
                            name: user.user.name,
                            email: user.user.email
                        };
                        return callback(null, 201, createdUser);
                    }
                }
            };

            var api = new TicketsZendeskAPI.TicketsZendeskAPI();
            api._getOrCreateZendeskUser(mockClient, userName, userEmail, function(err, user) {
                assert.ok(!err);
                assert.strictEqual(user.id, userID);
                assert.strictEqual(user.email, userEmail, util.inspect(user));
                assert.strictEqual(user.name, userName);
                callback();
            });
        });
    });
});
