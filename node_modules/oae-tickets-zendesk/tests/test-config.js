/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var Config = require('oae-tickets-zendesk/lib/internal/config').Config;
var TestUtils = require('oae-tickets-zendesk/tests/util');

var MockConfigAPI = TestUtils.MockConfigAPI;

describe('Config', function() {

    var tenantAlias = 'foobar';

    describe('#isZendeskForwardingEnabled()', function() {

        /**
         * Test that verifies that isZendeskForwardingEnabled() should return true when true is stored.
         */
        it('should return true when true stored', function() {
            var expected = true;
            var mockOaeConfig = new MockConfigAPI({
                'forwardToZendesk': expected
            });

            var config = new Config({'configAPI': mockOaeConfig});
            assert.strictEqual(config.isZendeskForwardingEnabled(tenantAlias), expected);
        });

        /**
         * Test that verifies that isZendeskForwardingEnabled() should return false when false is stored.
         */
        it('should return false when false stored', function() {
            var expected = false;
            var mockOaeConfig = new MockConfigAPI({
                'forwardToZendesk': expected
            });

            var config = new Config({'configAPI': mockOaeConfig});
            assert.strictEqual(config.isZendeskForwardingEnabled(tenantAlias), expected);
        });

        /**
         * Test that verifies that isZendeskForwardingEnabled() should return undefined when a non-boolean value is stored.
         */
        it('should return undefined when non-boolean value stored', function() {
            var expected = undefined;
            var mockOaeConfig = new MockConfigAPI({
                // Store non-boolean value
                'forwardToZendesk': 'non boolean value'
            });

            var config = new Config({'configAPI': mockOaeConfig});
            assert.strictEqual(config.isZendeskForwardingEnabled(tenantAlias), expected);
        });
    });

    describe('#getZendeskSubdomain()', function() {

        /**
         * Test that verifies that getZendeskSubdomain() should return valid subdomains.
         */
        it('should return valid subdomains', function() {
            var expected = 'myname';
            var mockOaeConfig = new MockConfigAPI({
                'zendeskSubdomain': expected
            });

            var config = new Config({'configAPI': mockOaeConfig});
            assert.strictEqual(config.getZendeskSubdomain(tenantAlias), expected);
        });

        /**
         * Test that verifies that getZendeskSubdomain() should not return invalid subdomains.
         */
        it('should not return invalid subdomains', function() {
            var expected = undefined;
            var invalidSubdomains = ['', undefined, 'foo@bar', '_', 'foo.bar.com'];

            for (var i = 0; i < invalidSubdomains.length; ++i) {
                var mockOaeConfig = new MockConfigAPI({
                    'zendeskSubdomain': invalidSubdomains[i]
                });

                var config = new Config({'configAPI': mockOaeConfig});
                assert.strictEqual(config.getZendeskSubdomain(tenantAlias), expected);
            }
        });
    });

    describe('#getZendeskEmail()', function() {

        /**
         * Test that verifies that getZendeskEmail() should return valid emails.
         */
        it('should return valid emails', function() {
            var expected = 'someemail+foo@example.com';
            var mockOaeConfig = new MockConfigAPI({
                'zendeskUserEmail': expected
            });

            var config = new Config({'configAPI': mockOaeConfig});
            assert.strictEqual(config.getZendeskEmail(tenantAlias), expected);
        });

        /**
         * Test that verifies that getZendeskEmail() should not return invalid email addresses.
         */
        it('should not return invalid email addresses', function() {
            var expected = undefined;
            var invalidEmails = ['', undefined, '@example.com', '_', 'foo.bar.com'];

            for (var i = 0; i < invalidEmails.length; ++i) {
                var mockOaeConfig = new MockConfigAPI({
                    'zendeskUserEmail': invalidEmails[i]
                });

                var config = new Config({'configAPI': mockOaeConfig});
                assert.strictEqual(config.getZendeskEmail(tenantAlias), expected);
            }
        });
    });

    describe('#getZendeskGroupID()', function() {

        /**
         * Test that verifies that getZendeskGroupID() should return integer group IDs.
         */
        it('should return integer group IDs', function() {
            var expected = '1234';
            var mockOaeConfig = new MockConfigAPI({
                'zendeskGroupID': expected
            });

            var config = new Config({'configAPI': mockOaeConfig});
            assert.strictEqual(config.getZendeskGroupID(tenantAlias), expected);
        });

        /**
         * Test that verifies that getZendeskGroupID() should not return non integer group IDs.
         */
        it('should not return non integer group IDs', function() {
            var expected = undefined;
            var invalidGroupIDs = ['', undefined, '@example.com', '_', 'foo.bar.com', 1.234];

            for (var i = 0; i < invalidGroupIDs.length; ++i) {
                var mockOaeConfig = new MockConfigAPI({
                    'zendeskGroupID': invalidGroupIDs[i]
                });

                var config = new Config({'configAPI': mockOaeConfig});
                assert.strictEqual(config.getZendeskGroupID(tenantAlias), expected);
            }
        });
    });

    describe('#getZendeskApiToken()', function() {

        /**
         * Test that verifies that getZendeskApiToken() should return valid API tokens.
         */
        it('should return valid API tokens', function() {
            var expected = 'thisisatokenofsomesort';
            var mockOaeConfig = new MockConfigAPI({
                'zendeskApiToken': expected
            });

            var config = new Config({'configAPI': mockOaeConfig});
            assert.strictEqual(config.getZendeskApiToken(tenantAlias), expected);
        });

        /**
         * Test that verifies that getZendeskApiToken() should not return invalid API tokens.
         */
        it('should not return invalid API tokens', function() {
            var expected = undefined;
            var invalidAPITokens = ['', undefined];

            for (var i = 0; i < invalidAPITokens.length; ++i) {
                var mockOaeConfig = new MockConfigAPI({
                    'zendeskApiToken': invalidAPITokens[i]
                });

                var config = new Config({'configAPI': mockOaeConfig});
                assert.strictEqual(config.getZendeskApiToken(tenantAlias), expected);
            }
        });
    });

    describe('#getZendeskUrl()', function() {

        /**
         * Test that verifies that getZendeskUrl() should return a zendesk URL containing our subdomain.
         */
        it('should return a zendesk URL containing our subdomain', function() {
            var subdomain = 'mysubdomain';
            var mockOaeConfig = new MockConfigAPI({
                'zendeskSubdomain': subdomain
            });

            var config = new Config({'configAPI': mockOaeConfig});
            var actual = config.getZendeskUrl(tenantAlias);

            assert.ok(actual.startsWith(util.format('https://%s.zendesk.com', subdomain)));
        });
    });
});
