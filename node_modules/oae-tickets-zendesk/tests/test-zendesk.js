/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var Config = require('oae-tickets-zendesk/lib/internal/config');
var TestUtils = require('oae-tickets-zendesk/tests/util');
var Zendesk = require('oae-tickets-zendesk/lib/internal/zendesk');

var MockConfigAPI = TestUtils.MockConfigAPI;

describe('Zendesk', function() {

    describe('#zendeskClientFromOAEConfig()', function() {

        var mockContext = {
            'user': function() {
                return {
                    'tenant': {
                        'alias': 'some-tenant-alias'
                    }
                };
            }
        };

        /**
         * Test that verifies that zendeskClientFromOAEConfig() creates a client with configured parameters.
         */
        it('creates a client with configured parameters', function() {
            var expectedUsername = 'foo@example.com';
            var expectedAPIToken = 'thisisasecrettoken';
            var expectedSubdomain = 'mysubdomain';
            var expectedZendeskURLPrefix = util.format('https://%s.zendesk.com', expectedSubdomain);

            var createClientCalls = 0;

            var mockOaeConfig = new MockConfigAPI({
                'zendeskSubdomain': expectedSubdomain,
                'zendeskUserEmail': expectedUsername,
                'zendeskApiToken': expectedAPIToken
            });

            var config = new Config.Config({'configAPI': mockOaeConfig});

            var mockZendeskClient = {
                'createClient': function(options) {
                    createClientCalls++;

                    assert.strictEqual(options.username, expectedUsername);
                    assert.strictEqual(options.token, expectedAPIToken);
                    assert.ok(options.remoteUri.startsWith(expectedZendeskURLPrefix));

                    return undefined;
                }
            };

            var zendesk = new Zendesk.Zendesk({
                'config': config,
                'nodeZendesk': mockZendeskClient
            });

            zendesk.zendeskClientFromOAEConfig(mockContext);

            assert.strictEqual(createClientCalls, 1);
        });
    });
});
